#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros +Q -- $0 "$@"
|#

(load "packages.lisp")
(load "cl-primality.lisp")
(load "mod.lisp")
(load "rsa.lisp")

(defpackage :ros.script.rsa.3874622299
  (:use :cl :rsa))
(in-package :ros.script.rsa.3874622299)

(defun main (bits &rest argv)
  (declare (ignorable argv))

  ;; argv is of type list
  ;; we can access each argument with car and cdr
  ;; if no arguments are passed, argv is nil
    ;;(format t "~A~%" (car argv))
    ;;(format t "~A~%" (type-of (car argv)))

    (format t "~A~%" (cdr argv))
    (format t "~A~%" (type-of (cdr argv)))

  ;; argument validation
  (cond
    ;; no arguments are passed
    ((eq argv nil)
      (rsa::generate-keys (parse-integer bits)))

    ;; output rsa parameters
    ((and (string= (car argv) "--show") (eq (cdr argv) nil)) 
      (progn 
        (rsa::generate-keys (parse-integer bits)) 
        (print-rsa)))

    ;; invalid argument
    (t 
      (progn 
        (format t "Invalid argument ~A~%" argv)
        (sb-ext:quit)))
  )

  ;; write generated keys to file
  (write-keys)
)

;; writes the generated keys to files
(defun write-keys ()
  (with-open-file (str "public.key"
                      :direction :output
                      :if-exists :supersede
                      :if-does-not-exist :create)
    (format str "~A~%~A~%" 
      (write-to-string rsa::e :base 16)
      (write-to-string rsa::n :base 16)))
  
  (with-open-file (str "private.key"
                      :direction :output
                      :if-exists :supersede
                      :if-does-not-exist :create)
    (format str "~A~%~A~%" 
      (write-to-string rsa::d :base 16)
      (write-to-string rsa::n :base 16)))
)
;;; vim: set ft=lisp lisp:
